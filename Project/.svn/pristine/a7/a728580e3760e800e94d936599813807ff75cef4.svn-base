package ir.assignments.four;

/*
  General code structure borrowed from: http://fossies.org/dox/lucene-4.1.0-src/SearchFiles_8java_source.html
*/

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;


public class SearchFiles {
	private IndexSearcher searcher;
	private MultiFieldQueryParser queryParser;
	
	public SearchFiles(String indexLocation) throws IOException {
		IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(indexLocation)));
		this.searcher = new IndexSearcher(reader);
		
		Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_41);
		this.queryParser = new MultiFieldQueryParser(Version.LUCENE_41, new String[] { "title", "content" }, analyzer);
	}
	
	public List<String> search(String queryString, int count) {
		try {
			Query query = this.queryParser.parse(queryString);
			return doPagingSearch(query, count);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	private List<String> doPagingSearch(Query query, int topNResults) throws IOException {

		// Collect hitsPerPage number of docs to be shown
		TopDocs results = searcher.search(query, topNResults);
		ScoreDoc[] hits = results.scoreDocs;

		ArrayList<String> urls = new ArrayList<String>();
		
		int numTotalHits = results.totalHits;
		for (int i = 0; i < Math.min(topNResults, numTotalHits); i++) {
			Document doc = searcher.doc(hits[i].doc);
			String url = doc.get("url");
			urls.add(url);
		}
		
		return urls;
	}
}

//class IsolationSimilarity extends DefaultSimilarity {
//	public IsolationSimilarity(){
//	}
//	public float idf(int docFreq, int numDocs) {
//		return(float)15;
//	}
//	public float coord(int overlap, int maxOverlap) {
//		return 3f;
//	}
//	public float lengthNorm(String fieldName, int numTerms) {
//		return 1.3f;
//	}
//}
