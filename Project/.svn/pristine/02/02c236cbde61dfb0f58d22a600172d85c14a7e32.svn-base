package ir.assignments.four;

import java.io.File;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

import ir.assignments.three.storage.DocumentStorage;
import ir.assignments.three.storage.HtmlDocument;
import ir.assignments.three.storage.IDocumentStorage;

public class Indexer {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		DocumentStorage docStorage = new DocumentStorage("docStorage\\docStorage");
		try {
			Indexer indexer = new Indexer();
			indexer.indexDocumentsEnhanced(docStorage, "docIndexEnhanced");
		}
		finally {
			docStorage.close();
		}
	}

	public void indexDocuments(IDocumentStorage docStorage, String indexPath) {
		Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_41);

		try {
			Directory indexDir = FSDirectory.open(new File(indexPath));
			IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_41, analyzer);
			IndexWriter indexWriter = new IndexWriter(indexDir, config);

			try {
				int i = 0;
				for (HtmlDocument crawledDoc : docStorage.getAll()) {
					
					if (i % 500 == 0)
						System.out.println(i + "");
					
					i++;
//					if (i >= 1000)
//						break;

					Document indexDoc = new Document();
					
					indexDoc.add(new StringField("url", crawledDoc.getUrl(), Field.Store.YES));
					indexDoc.add(new TextField("title", crawledDoc.getTitle(), Field.Store.YES));
					indexDoc.add(new TextField("content", tokenize(crawledDoc.getBody()), Field.Store.NO));

					// Update document based on URL
					indexWriter.updateDocument(new Term("url",  crawledDoc.getUrl()), indexDoc);
				}
			}
			finally {
				indexWriter.close();
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("Done");
	}
	
	public void indexDocumentsEnhanced(IDocumentStorage docStorage, String indexPath) {
		Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_41);

		try {
			Directory indexDir = FSDirectory.open(new File(indexPath));
			IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_41, analyzer);
			IndexWriter indexWriter = new IndexWriter(indexDir, config);

			try {
				int i = 0;
				for (HtmlDocument crawledDoc : docStorage.getAll()) {
					
					if (i % 500 == 0)
						System.out.println(i + "");
					
					i++;
//					if (i >= 1000)
//						break;

					Document indexDoc = new Document();
					
					Field url = new TextField("url", crawledDoc.getUrl(), Field.Store.YES);
					url.setBoost(1.1f);
					Field title = new TextField("title", crawledDoc.getTitle(), Field.Store.YES);
					title.setBoost(2.0f);
					Field content = new TextField("content", tokenize(crawledDoc.getBody()), Field.Store.NO);
					Field importantContent = new TextField("important_content", tokenize(crawledDoc.getImportantBody()), Field.Store.NO);
					importantContent.setBoost(1.3f);
					
					indexDoc.add(url);
					indexDoc.add(title);
					indexDoc.add(content);
					indexDoc.add(importantContent);
					
					// Update document based on URL
					indexWriter.updateDocument(new Term("url",  crawledDoc.getUrl()), indexDoc);
				}
			}
			finally {
				indexWriter.close();
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("Done");
	}
	
	private static Pattern EXACTLY_ONE_NUMBER = Pattern.compile("^[^\\d]*\\d[^\\d]*$"); // compile only use
	private static Matcher EXACTLY_ONE_NUMBER_MATCHER = EXACTLY_ONE_NUMBER.matcher("");
	
	private String tokenize(String input) {
		// Tokenize by filtering out words and returning a single string for lucene to tokenize
		StringBuilder tokens = new StringBuilder();
		if (input == null)
			return tokens.toString();

		input = input.toLowerCase();
		String[] parts = input.split("[^a-zA-Z0-9'-]+"); // alphanumeric words
		for (String part : parts) {
			String tmp = part.trim();
			if (isInterestingWord(tmp))
			{
				tokens.append(tmp);
				tokens.append(" ");
			}
		}
		
		return tokens.toString();
	}	

	private boolean isInterestingWord(String token) {
		return token.length() >= 3 && // filter out words shorter than 3 letters
			   !EXACTLY_ONE_NUMBER_MATCHER.reset(token).matches(); // don't allow tokens with a single number
	}
}
